// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
import fetch from "node-fetch";

async function createTestPayment() {
  try {
    const response = await fetch("http://localhost:3001/api/payment/register", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        amount: 1000,
        returnUrl: "http://localhost:5174/test-success",
        failUrl: "http://localhost:5174/test-cancel",
        description: "–¢–ï–°–¢–û–í–´–ô –ü–õ–ê–¢–ï–ñ –î–õ–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò",
      }),
    });

    const result = await response.json();
    console.log("‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω:", result);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(async () => {
      const statusResponse = await fetch(
        "http://localhost:3001/api/payment/status",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            orderId: result.orderId,
          }),
        }
      );

      const statusResult = await statusResponse.json();
      console.log("üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:", statusResult);
    }, 2000);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
  }
}

createTestPayment();
