// Payment service for gift certificates and other payments

export interface PaymentData {
  amount: number;
  currency: string;
  description: string;
  orderId: string;
  customerEmail: string;
  customerName: string;
  returnUrl: string;
  cancelUrl: string;
}

export interface CertificatePaymentData extends PaymentData {
  recipientName: string;
  recipientEmail: string;
  senderName: string;
  senderEmail: string;
  message?: string;
}

export interface AlfaBankPaymentResponse {
  formUrl: string;
  orderId: string;
  errorCode?: string;
  errorMessage?: string;
}

export interface AlfaBankOrderStatus {
  orderStatus: number;
  orderNumber: string;
  pan: string;
  expiration: string;
  cardholderName: string;
  amount: number;
  currency: number;
  approvalCode: string;
  ip: string;
  date: number;
  errorCode?: string;
  errorMessage?: string;
}

class PaymentService {
  private apiUrl: string;
  private apiKey: string;
  private alfaBankUrl: string;
  private alfaBankToken: string;
  private alfaBankLogin: string;
  private alfaBankPassword: string;

  constructor() {
    this.apiUrl = import.meta.env.VITE_PAYMENT_API_URL || '';
    this.apiKey = import.meta.env.VITE_PAYMENT_API_KEY || '';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥—É
    const isProduction = import.meta.env.PROD || false;
    
    if (isProduction) {
      // –ü—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥–∞
      this.alfaBankUrl = 'https://pay.alfabank.ru/payment/rest';
      this.alfaBankToken = 'pfcr5js74l5jnsqcsrms960nok';
      this.alfaBankLogin = 'clinicaldan-operator';
      this.alfaBankPassword = 'vy_$2BTVD*KVD#u/';
    } else {
      // –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞
      this.alfaBankUrl = 'https://alfa.rbsuat.com/payment/rest';
      this.alfaBankToken = 'pfcr5js74l5jnsqcsrms960nok';
      this.alfaBankLogin = 'clinicaldan-operator';
      this.alfaBankPassword = 'KACr2LiW3R?';
    }
    
    console.log(`üîó –ü–ª–∞—Ç–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ ${isProduction ? '–ü–†–û–î–ê–ö–®–ù' : '–¢–ï–°–¢–û–í–û–ô'} —Å—Ä–µ–¥–µ`);
    console.log(`üåê URL –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞: ${this.alfaBankUrl}`);
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫
  async createAlfaBankPayment(data: CertificatePaymentData): Promise<AlfaBankPaymentResponse> {
    try {
      const orderNumber = this.generateOrderNumber();
      
      const requestData = {
        amount: data.amount,
        returnUrl: data.returnUrl,
        failUrl: data.cancelUrl,
        description: data.description
      };

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
      const proxyUrl = import.meta.env.VITE_API_URL || 'http://localhost:3001';
      
      const response = await fetch(`${proxyUrl}/api/payment/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      if (!response.ok) {
        throw new Error(`Payment API error: ${response.status}`);
      }

      const result = await response.json();
      
      if (result.error) {
        throw new Error(`Payment error: ${result.errorMessage || result.errorCode}`);
      }

      return {
        formUrl: result.formUrl,
        orderId: result.orderId
      };
    } catch (error) {
      console.error('Error creating Alfa Bank payment:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫
  async checkAlfaBankOrderStatus(orderId: string): Promise<AlfaBankOrderStatus> {
    try {
      const requestData = {
        orderId: orderId
      };

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
      const proxyUrl = import.meta.env.VITE_API_URL || 'http://localhost:3001';
      
      const response = await fetch(`${proxyUrl}/api/payment/status`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      if (!response.ok) {
        throw new Error(`Payment status check error: ${response.status}`);
      }

      const result = await response.json();
      
      if (result.error) {
        throw new Error(`Payment error: ${result.errorMessage || result.errorCode}`);
      }

      return result;
    } catch (error) {
      console.error('Error checking Alfa Bank order status:', error);
      throw error;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  async createCertificatePayment(data: CertificatePaymentData): Promise<{ paymentUrl: string; orderId: string }> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
      const result = await this.createAlfaBankPayment(data);
      return {
        paymentUrl: result.formUrl,
        orderId: result.orderId
      };
    } catch (error) {
      console.error('Error creating certificate payment:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  async checkPaymentStatus(orderId: string): Promise<{ status: string; paid: boolean }> {
    try {
      const result = await this.checkAlfaBankOrderStatus(orderId);
      
      // –°—Ç–∞—Ç—É—Å—ã –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞:
      // 0 - –∑–∞–∫–∞–∑ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω
      // 1 - –ø—Ä–µ–¥–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –∑–∞—Ö–æ–ª–¥–∏—Ä–æ–≤–∞–Ω–∞
      // 2 - –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
      // 3 - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞
      // 4 - –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—ã–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞
      // 5 - –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ ACS –±–∞–Ω–∫–∞-—ç–º–∏—Ç–µ–Ω—Ç–∞
      // 6 - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
      
      const isPaid = result.orderStatus === 2;
      const status = isPaid ? 'paid' : 'pending';
      
      return {
        status,
        paid: isPaid
      };
    } catch (error) {
      console.error('Error checking payment status:', error);
      throw error;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
  async createAppointmentPayment(data: PaymentData): Promise<{ paymentUrl: string; orderId: string }> {
    try {
      const certificateData: CertificatePaymentData = {
        ...data,
        recipientName: data.customerName,
        recipientEmail: data.customerEmail,
        senderName: data.customerName,
        senderEmail: data.customerEmail,
        message: ''
      };
      
      return await this.createCertificatePayment(certificateData);
    } catch (error) {
      console.error('Error creating appointment payment:', error);
      throw error;
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∑–∞–∫–∞–∑–∞
  generateOrderId(): string {
    const timestamp = Date.now();
    const random = Math.random().toString(36).substring(2, 15);
    return `order_${timestamp}_${random}`;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞
  generateOrderNumber(): string {
    const timestamp = Date.now();
    const random = Math.random().toString(36).substring(2, 15);
    return `cert_${timestamp}_${random}`;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  formatAmount(amount: number): string {
    return amount.toLocaleString('ru-RU') + ' ‚ÇΩ';
  }
}

export const paymentService = new PaymentService();
export default paymentService; 