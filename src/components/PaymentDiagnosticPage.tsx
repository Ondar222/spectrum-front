import React, { useState } from "react";

export default function PaymentDiagnosticPage() {
  const [amount, setAmount] = useState(1000);
  const [isLoading, setIsLoading] = useState(false);
  const [logs, setLogs] = useState<string[]>([]);
  const [result, setResult] = useState<any>(null);
  const [testMode, setTestMode] = useState<"create" | "status" | "diagnostic">(
    "create"
  );

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs((prev) => [...prev, `[${timestamp}] ${message}`]);
  };

  const handleTestPayment = async () => {
    setIsLoading(true);
    setLogs([]);
    setResult(null);

    try {
      addLog("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ü–õ–ê–¢–ï–ñ–ê ===");
      addLog("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...");

      const testData = {
        amount: amount,
        returnUrl: `${window.location.origin}/certificates/success?orderId=test`,
        failUrl: `${window.location.origin}/certificates/cancel?orderId=test`,
        description: `–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É ${amount} ‚ÇΩ`,
      };

      addLog(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:`);
      addLog(`- –°—É–º–º–∞: ${amount} ‚ÇΩ (${amount * 100} –∫–æ–ø–µ–µ–∫)`);
      addLog(`- Return URL: ${testData.returnUrl}`);
      addLog(`- Fail URL: ${testData.failUrl}`);
      addLog(`- –û–ø–∏—Å–∞–Ω–∏–µ: ${testData.description}`);

      addLog(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...`);

      const response = await fetch("/api/payment/register", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(testData),
      });

      addLog(
        `–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`
      );

      const result = await response.json();
      addLog(`–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${JSON.stringify(result, null, 2)}`);

      if (result.error) {
        addLog(`‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ü–õ–ê–¢–ï–ñ–ê:`);
        addLog(`- –ö–æ–¥ –æ—à–∏–±–∫–∏: ${result.errorCode}`);
        addLog(`- –°–æ–æ–±—â–µ–Ω–∏–µ: ${result.errorMessage || result.message}`);
        addLog(`- –î–µ—Ç–∞–ª–∏: ${result.details || "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π"}`);

        // –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏
        if (result.errorCode === "INVALID_AMOUNT") {
          addLog(`üîç –ê–ù–ê–õ–ò–ó: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã`);
        } else if (result.errorCode === "INVALID_ORDER_NUMBER") {
          addLog(`üîç –ê–ù–ê–õ–ò–ó: –ü—Ä–æ–±–ª–µ–º–∞ —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞`);
        } else if (result.errorCode === "INVALID_RETURN_URL") {
          addLog(`üîç –ê–ù–ê–õ–ò–ó: –ü—Ä–æ–±–ª–µ–º–∞ —Å URL –≤–æ–∑–≤—Ä–∞—Ç–∞`);
        } else if (result.errorCode === "ACCESS_DENIED") {
          addLog(`üîç –ê–ù–ê–õ–ò–ó: –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π`);
        }

        setResult({ error: true, ...result });
      } else {
        addLog(`‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:`);
        addLog(`- Order ID: ${result.orderId}`);
        addLog(`- Order Number: ${result.orderNumber}`);
        addLog(`- Form URL: ${result.formUrl}`);
        setResult(result);
      }
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      addLog(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${errorMessage}`);
      addLog(`üîç –ê–ù–ê–õ–ò–ó: –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º`);
      setResult({ error: true, message: errorMessage });
    } finally {
      setIsLoading(false);
    }
  };

  const handleTestStatus = async () => {
    if (!result?.orderId) {
      addLog("‚ùå –û–®–ò–ë–ö–ê: –ù–µ—Ç orderId –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞");
      return;
    }

    setIsLoading(true);
    addLog(`=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–ê–¢–£–°–ê –ü–õ–ê–¢–ï–ñ–ê ===`);
    addLog(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ${result.orderId}`);

    try {
      const response = await fetch("/api/payment/status", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ orderId: result.orderId }),
      });

      addLog(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);

      const statusResult = await response.json();
      addLog(
        `–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${JSON.stringify(statusResult, null, 2)}`
      );

      if (statusResult.error) {
        addLog(`‚ùå –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò –°–¢–ê–¢–£–°–ê:`);
        addLog(`- –ö–æ–¥ –æ—à–∏–±–∫–∏: ${statusResult.errorCode}`);
        addLog(
          `- –°–æ–æ–±—â–µ–Ω–∏–µ: ${statusResult.errorMessage || statusResult.message}`
        );
      } else {
        addLog(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ–ª—É—á–µ–Ω:`);
        addLog(`- Order Status: ${statusResult.orderStatus}`);
        addLog(`- Order Number: ${statusResult.orderNumber}`);
        addLog(`- Amount: ${statusResult.amount} –∫–æ–ø–µ–µ–∫`);

        // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞
        switch (statusResult.orderStatus) {
          case 0:
            addLog(`üîç –ê–ù–ê–õ–ò–ó: –ó–∞–∫–∞–∑ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω`);
            break;
          case 1:
            addLog(`üîç –ê–ù–ê–õ–ò–ó: –ü—Ä–µ–¥–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –∑–∞—Ö–æ–ª–¥–∏—Ä–æ–≤–∞–Ω–∞`);
            break;
          case 2:
            addLog(`üîç –ê–ù–ê–õ–ò–ó: ‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω`);
            break;
          case 3:
            addLog(`üîç –ê–ù–ê–õ–ò–ó: ‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞`);
            break;
          case 4:
            addLog(`üîç –ê–ù–ê–õ–ò–ó: ‚ùå –ü–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—ã–ª –ø—Ä–æ–≤–µ–¥–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç`);
            break;
          case 5:
            addLog(
              `üîç –ê–ù–ê–õ–ò–ó: –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ ACS –±–∞–Ω–∫–∞-—ç–º–∏—Ç–µ–Ω—Ç–∞`
            );
            break;
          case 6:
            addLog(`üîç –ê–ù–ê–õ–ò–ó: ‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`);
            break;
          default:
            addLog(`üîç –ê–ù–ê–õ–ò–ó: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞`);
        }
      }

      setResult({ ...result, status: statusResult });
    } catch (error) {
      const errorMessage =
        error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      addLog(`‚ùå –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò –°–¢–ê–¢–£–°–ê: ${errorMessage}`);
    } finally {
      setIsLoading(false);
    }
  };

  const handleDiagnosticCheck = async () => {
    setIsLoading(true);
    addLog(`=== –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ ===`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    addLog(`1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:`);
    addLog(`- API URL: ${window.location.origin}/api`);
    addLog(`- –¢–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω: ${window.location.origin}`);
    addLog(`- –ü—Ä–æ—Ç–æ–∫–æ–ª: ${window.location.protocol}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    addLog(`2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API:`);
    try {
      const healthCheck = await fetch("/api/payment/register", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          amount: 100,
          returnUrl: "test",
          failUrl: "test",
          description: "test",
        }),
      });
      addLog(`- –°—Ç–∞—Ç—É—Å API: ${healthCheck.status}`);
    } catch (error) {
      addLog(`- ‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS
    addLog(`3. –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS:`);
    addLog(`- CORS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL
    addLog(`4. –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL:`);
    if (window.location.protocol === "https:") {
      addLog(`- ‚úÖ HTTPS –∞–∫—Ç–∏–≤–µ–Ω`);
    } else {
      addLog(`- ‚ö†Ô∏è HTTP –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã)`);
    }

    setIsLoading(false);
  };

  const clearLogs = () => {
    setLogs([]);
    setResult(null);
  };

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="container mx-auto px-4">
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-lg shadow-lg p-8 mb-6">
            <h1 className="text-2xl font-bold text-dark mb-6">
              –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            </h1>

            <div className="space-y-4 mb-6">
              <div>
                <label className="block text-gray-700 mb-2">
                  –°—É–º–º–∞ (—Ä—É–±–ª–∏)
                </label>
                <input
                  type="number"
                  value={amount}
                  onChange={(e) => setAmount(Number(e.target.value))}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:border-primary"
                  min="100"
                  step="100"
                />
              </div>

              <div className="flex flex-wrap gap-4">
                <button
                  onClick={handleTestPayment}
                  disabled={isLoading}
                  className={`bg-primary hover:bg-primaryDark text-white py-3 px-6 rounded-md font-medium transition-colors ${
                    isLoading ? "opacity-50 cursor-not-allowed" : ""
                  }`}
                >
                  {isLoading ? "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..." : "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"}
                </button>

                {result?.orderId && (
                  <button
                    onClick={handleTestStatus}
                    disabled={isLoading}
                    className={`bg-blue-500 hover:bg-blue-600 text-white py-3 px-6 rounded-md font-medium transition-colors ${
                      isLoading ? "opacity-50 cursor-not-allowed" : ""
                    }`}
                  >
                    {isLoading ? "–ü—Ä–æ–≤–µ—Ä–∫–∞..." : "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"}
                  </button>
                )}

                <button
                  onClick={handleDiagnosticCheck}
                  disabled={isLoading}
                  className={`bg-green-500 hover:bg-green-600 text-white py-3 px-6 rounded-md font-medium transition-colors ${
                    isLoading ? "opacity-50 cursor-not-allowed" : ""
                  }`}
                >
                  {isLoading ? "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞..." : "–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"}
                </button>

                <button
                  onClick={clearLogs}
                  className="bg-gray-500 hover:bg-gray-600 text-white py-3 px-6 rounded-md font-medium transition-colors"
                >
                  –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
                </button>
              </div>
            </div>

            {result && (
              <div className="mb-6 p-4 bg-gray-50 border border-gray-200 rounded-lg">
                <h3 className="font-semibold text-dark mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç:</h3>
                <pre className="text-sm text-gray-700 whitespace-pre-wrap">
                  {JSON.stringify(result, null, 2)}
                </pre>
              </div>
            )}
          </div>

          <div className="bg-white rounded-lg shadow-lg p-8">
            <h2 className="text-xl font-bold text-dark mb-4">
              –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            </h2>
            <div className="bg-black text-green-400 p-4 rounded-lg font-mono text-sm h-96 overflow-y-auto">
              {logs.length === 0 ? (
                <p className="text-gray-500">
                  –õ–æ–≥–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å...
                </p>
              ) : (
                logs.map((log, index) => (
                  <div key={index} className="mb-1">
                    {log}
                  </div>
                ))
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
