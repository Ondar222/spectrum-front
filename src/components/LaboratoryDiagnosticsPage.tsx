import React, { useState, useEffect, useMemo } from 'react';
import { Link } from 'react-router-dom';
import archimedService from '../services/archimed';
import type { ApiService } from '../types/cms';
import { SERVICE_CATEGORIES, groupServicesByCategory } from '../services/serviceCategories';
import AppointmentModal from './AppointmentModal';

const LaboratoryDiagnosticsPage: React.FC = () => {
  const [services, setServices] = useState<ApiService[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [appointmentModal, setAppointmentModal] = useState<{
    isOpen: boolean;
    service?: ApiService;
  }>({
    isOpen: false
  });

  useEffect(() => {
    const loadServices = async () => {
      try {
        setIsLoading(true);
        setError(null);
        const servicesData = await archimedService.getServices();
        setServices(servicesData);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥:', err);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± —É—Å–ª—É–≥–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } finally {
        setIsLoading(false);
      }
    };

    loadServices();
  }, []);

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏
  const laboratoryServices = useMemo(() => {
    const labCategory = SERVICE_CATEGORIES.find(c => c.id === 'laboratory');
    if (!labCategory) return [];
    
    return services.filter(service => 
      labCategory.keywords.some(keyword => 
        service.name.toLowerCase().includes(keyword) ||
        service.group_name?.toLowerCase().includes(keyword) ||
        service.altname?.toLowerCase().includes(keyword)
      )
    );
  }, [services]);

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const groupedServices = useMemo(() => {
    const groups: { [key: string]: ApiService[] } = {
      'blood': [],
      'urine': [],
      'biochemistry': [],
      'hormones': [],
      'infections': [],
      'cytology': [],
      'other': []
    };

    laboratoryServices.forEach(service => {
      const name = service.name.toLowerCase();
      const group = service.group_name?.toLowerCase() || '';
      
      if (name.includes('–∫—Ä–æ–≤—å') || name.includes('–≥–µ–º–∞—Ç–æ–ª–æ–≥') || group.includes('–∫—Ä–æ–≤—å')) {
        groups.blood.push(service);
      } else if (name.includes('–º–æ—á–∞') || name.includes('–º–æ—á–µ–≤') || group.includes('–º–æ—á–∞')) {
        groups.urine.push(service);
      } else if (name.includes('–±–∏–æ—Ö–∏–º–∏') || name.includes('–≥–ª—é–∫–æ–∑') || name.includes('—Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω') || group.includes('–±–∏–æ—Ö–∏–º–∏')) {
        groups.biochemistry.push(service);
      } else if (name.includes('–≥–æ—Ä–º–æ–Ω') || name.includes('—Ç–∏—Ä–µ–æ') || name.includes('—ç—Å—Ç—Ä–æ–≥–µ–Ω') || group.includes('–≥–æ—Ä–º–æ–Ω')) {
        groups.hormones.push(service);
      } else if (name.includes('–∏–Ω—Ñ–µ–∫—Ü') || name.includes('–≤–∏—Ä—É—Å') || name.includes('–±–∞–∫—Ç–µ—Ä–∏') || name.includes('–ø–æ—Å–µ–≤') || group.includes('–∏–Ω—Ñ–µ–∫—Ü')) {
        groups.infections.push(service);
      } else if (name.includes('—Ü–∏—Ç–æ–ª–æ–≥') || name.includes('–º–∞–∑–æ–∫') || name.includes('–æ–Ω–∫–æ—Ü–∏—Ç–æ–ª–æ–≥') || group.includes('—Ü–∏—Ç–æ–ª–æ–≥')) {
        groups.cytology.push(service);
      } else {
        groups.other.push(service);
      }
    });

    return groups;
  }, [laboratoryServices]);

  const getServicePrice = (service: ApiService) => {
    return service.price || 0;
  };

  const handleAppointmentClick = (service?: ApiService) => {
    setAppointmentModal({
      isOpen: true,
      service
    });
  };

  const handleAppointmentSuccess = () => {
    console.log('Appointment created successfully');
  };

  const categoryNames = {
    blood: '–ê–Ω–∞–ª–∏–∑—ã –∫—Ä–æ–≤–∏',
    urine: '–ê–Ω–∞–ª–∏–∑—ã –º–æ—á–∏',
    biochemistry: '–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã',
    hormones: '–ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
    infections: '–ê–Ω–∞–ª–∏–∑—ã –Ω–∞ –∏–Ω—Ñ–µ–∫—Ü–∏–∏',
    cytology: '–¶–∏—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
    other: '–î—Ä—É–≥–∏–µ –∞–Ω–∞–ª–∏–∑—ã'
  };

  const categoryIcons = {
    blood: 'ü©∏',
    urine: 'üß™',
    biochemistry: '‚öóÔ∏è',
    hormones: '‚öïÔ∏è',
    infections: 'ü¶†',
    cytology: 'üî¨',
    other: 'üìã'
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 py-6 sm:py-8 md:py-12">
        <div className="container mx-auto px-3 sm:px-4">
          <div className="text-center mb-8 sm:mb-10 md:mb-12">
            <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold text-dark mb-3 sm:mb-4">–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</h1>
            <p className="text-sm sm:text-base md:text-xl text-gray-600 max-w-3xl mx-auto">–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 py-6 sm:py-8 md:py-12">
        <div className="container mx-auto px-3 sm:px-4">
          <div className="text-center">
            <h1 className="text-2xl font-bold text-dark mb-4">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h1>
            <p className="text-gray-600 mb-6">{error}</p>
            <button 
              onClick={() => window.location.reload()}
              className="px-6 py-2 bg-primary text-white rounded-lg hover:bg-primaryDark transition-colors"
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* –ì–µ—Ä–æ–π-—Å–µ–∫—Ü–∏—è */}
      <section 
        className="py-12 sm:py-16 md:py-20 bg-cover bg-center relative" 
        style={{ backgroundImage: `url(/bg-hero.jpg)` }}
      >
        <div className="absolute inset-0 bg-black/50"></div>
        <div className="container mx-auto px-3 sm:px-4 text-center text-white relative z-10">
          <h1 className="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold mb-2">–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</h1>
          <p className="text-sm sm:text-base md:text-lg text-white/90 max-w-2xl mx-auto">
            –ü–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –¥–ª—è —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
          </p>
        </div>
      </section>

      {/* –£—Å–ª—É–≥–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ */}
      <section className="py-8 sm:py-10 md:py-12 bg-white">
        <div className="container mx-auto px-3 sm:px-4">
          <h2 className="text-xl sm:text-2xl md:text-3xl font-bold text-center mb-8 sm:mb-10 md:mb-12">
            –í–∏–¥—ã –∞–Ω–∞–ª–∏–∑–æ–≤
          </h2>
          
          {/* –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
          <div className="mb-8">
            <div className="flex flex-wrap justify-center gap-2 sm:gap-3">
              <button
                onClick={() => setSelectedCategory('all')}
                className={`px-4 py-2 rounded-full text-sm sm:text-base font-medium transition-colors ${
                  selectedCategory === 'all'
                    ? 'bg-primary text-white'
                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
              >
                –í—Å–µ –∞–Ω–∞–ª–∏–∑—ã
              </button>
              {Object.entries(categoryNames).map(([key, name]) => {
                const services = groupedServices[key as keyof typeof groupedServices];
                if (services.length === 0) return null;
                
                return (
                  <button
                    key={key}
                    onClick={() => setSelectedCategory(key)}
                    className={`px-4 py-2 rounded-full text-sm sm:text-base font-medium transition-colors flex items-center gap-2 ${
                      selectedCategory === key
                        ? 'bg-primary text-white'
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    <span>{categoryIcons[key as keyof typeof categoryIcons]}</span>
                    {name}
                  </button>
                );
              })}
            </div>
          </div>

          {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ª—É–≥ */}
          {selectedCategory === 'all' ? (
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            <div className="space-y-8">
              {Object.entries(groupedServices).map(([key, services]) => {
                if (services.length === 0) return null;
                
                return (
                  <div key={key} className="bg-gray-50 rounded-lg p-4 sm:p-6">
                    <div className="flex items-center gap-3 mb-4">
                      <span className="text-2xl">{categoryIcons[key as keyof typeof categoryIcons]}</span>
                      <div>
                        <h3 className="text-lg sm:text-xl font-semibold text-gray-900">
                          {categoryNames[key as keyof typeof categoryNames]}
                        </h3>
                        <p className="text-sm text-gray-600">{services.length} –∞–Ω–∞–ª–∏–∑–æ–≤</p>
                      </div>
                    </div>
                    <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
                      {services.slice(0, 6).map((service) => (
                        <div key={service.id} className="bg-white p-4 rounded-lg shadow-sm hover:shadow-md transition-shadow">
                          <h4 className="font-medium text-gray-900 mb-2 text-sm sm:text-base">{service.name}</h4>
                          {service.altname && service.altname !== service.name && (
                            <p className="text-gray-600 mb-2 text-xs italic">{service.altname}</p>
                          )}
                          <div className="flex justify-between items-center">
                            <span className="text-primary font-bold text-sm">{getServicePrice(service).toLocaleString('ru-RU')} ‚ÇΩ</span>
                            <button 
                              onClick={() => handleAppointmentClick(service)}
                              className="px-3 py-1 bg-primary text-white rounded text-xs hover:bg-primaryDark transition-colors"
                            >
                              –ó–∞–ø–∏—Å–∞—Ç—å—Å—è
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                    {services.length > 6 && (
                      <div className="text-center mt-4">
                        <button className="text-primary text-sm hover:underline">
                          –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë {services.length - 6} –∞–Ω–∞–ª–∏–∑–æ–≤
                        </button>
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
          ) : (
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6">
              {groupedServices[selectedCategory as keyof typeof groupedServices]?.map((service) => (
                <div key={service.id} className="bg-gray-50 p-4 sm:p-6 rounded-lg shadow-sm hover:shadow-md transition-shadow flex flex-col h-full">
                  <div className="flex-grow">
                    <h3 className="text-lg sm:text-xl font-semibold mb-2 sm:mb-3 text-gray-900 leading-tight">{service.name}</h3>
                    {service.altname && service.altname !== service.name && (
                      <p className="text-gray-600 mb-2 sm:mb-3 text-xs sm:text-sm italic leading-relaxed">{service.altname}</p>
                    )}
                    {service.info && (
                      <p className="text-gray-600 mb-3 sm:mb-4 text-xs sm:text-sm leading-relaxed line-clamp-4">{service.info}</p>
                    )}
                  </div>
                  <div className="flex justify-between items-center mt-auto pt-3 sm:pt-4">
                    <span className="text-primary font-bold text-base sm:text-lg">{getServicePrice(service).toLocaleString('ru-RU')} ‚ÇΩ</span>
                    <button 
                      onClick={() => handleAppointmentClick(service)}
                      className="px-4 sm:px-6 py-1.5 sm:py-2 bg-primary text-white rounded-lg hover:bg-primaryDark transition-colors font-medium text-xs sm:text-sm"
                    >
                      –ó–∞–ø–∏—Å–∞—Ç—å—Å—è
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </section>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –∞–Ω–∞–ª–∏–∑–∞–º */}
      <section className="py-8 sm:py-10 md:py-12 bg-gray-50">
        <div className="container mx-auto px-3 sm:px-4">
          <h2 className="text-xl sm:text-2xl md:text-3xl font-bold text-center mb-8 sm:mb-10 md:mb-12">
            –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞–Ω–∞–ª–∏–∑–∞–º
          </h2>
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            <div className="bg-white p-4 sm:p-6 rounded-lg shadow-sm">
              <h3 className="text-lg font-semibold mb-3 text-gray-900">–ê–Ω–∞–ª–∏–∑—ã –∫—Ä–æ–≤–∏</h3>
              <ul className="text-sm text-gray-600 space-y-2">
                <li>‚Ä¢ –°–¥–∞–≤–∞—Ç—å –Ω–∞—Ç–æ—â–∞–∫ (8-12 —á–∞—Å–æ–≤ –±–µ–∑ –µ–¥—ã)</li>
                <li>‚Ä¢ –ú–æ–∂–Ω–æ –ø–∏—Ç—å –≤–æ–¥—É</li>
                <li>‚Ä¢ –ò–∑–±–µ–≥–∞—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫</li>
                <li>‚Ä¢ –ù–µ –∫—É—Ä–∏—Ç—å –∑–∞ —á–∞—Å –¥–æ —Å–¥–∞—á–∏</li>
              </ul>
            </div>
            <div className="bg-white p-4 sm:p-6 rounded-lg shadow-sm">
              <h3 className="text-lg font-semibold mb-3 text-gray-900">–ê–Ω–∞–ª–∏–∑—ã –º–æ—á–∏</h3>
              <ul className="text-sm text-gray-600 space-y-2">
                <li>‚Ä¢ –£—Ç—Ä–µ–Ω–Ω—è—è –ø–æ—Ä—Ü–∏—è –º–æ—á–∏</li>
                <li>‚Ä¢ –¢—â–∞—Ç–µ–ª—å–Ω—ã–π —Ç—É–∞–ª–µ—Ç –ø–æ–ª–æ–≤—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤</li>
                <li>‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø–æ—Ä—Ü–∏—è –º–æ—á–∏</li>
                <li>‚Ä¢ –°—Ç–µ—Ä–∏–ª—å–Ω–∞—è –ø–æ—Å—É–¥–∞</li>
              </ul>
            </div>
            <div className="bg-white p-4 sm:p-6 rounded-lg shadow-sm">
              <h3 className="text-lg font-semibold mb-3 text-gray-900">–ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã</h3>
              <ul className="text-sm text-gray-600 space-y-2">
                <li>‚Ä¢ –°—Ç—Ä–æ–≥–æ –Ω–∞—Ç–æ—â–∞–∫</li>
                <li>‚Ä¢ –í –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–Ω–∏ —Ü–∏–∫–ª–∞</li>
                <li>‚Ä¢ –û—Ç–º–µ–Ω–∞ –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤</li>
                <li>‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞</li>
              </ul>
            </div>
          </div>
        </div>
      </section>

      {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–ø–∏—Å–∏ */}
      <section className="py-8 sm:py-10 md:py-12 bg-primary">
        <div className="container mx-auto px-3 sm:px-4 text-center">
          <h2 className="text-xl sm:text-2xl md:text-3xl font-bold text-white mb-4 sm:mb-6">
            –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑—ã
          </h2>
          <p className="text-white/90 mb-6 sm:mb-8 max-w-2xl mx-auto text-sm sm:text-base">
            –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –∏ –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø–∏—Å–∏
          </p>
          <button 
            onClick={() => handleAppointmentClick()}
            className="px-6 sm:px-8 py-2 sm:py-3 bg-white text-primary font-semibold rounded-lg hover:bg-gray-100 transition-colors text-sm sm:text-base md:text-lg"
          >
            –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω
          </button>
        </div>
      </section>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º */}
      <AppointmentModal
        isOpen={appointmentModal.isOpen}
        onClose={() => setAppointmentModal({ isOpen: false })}
        service={appointmentModal.service}
        onSuccess={handleAppointmentSuccess}
      />
    </div>
  );
};

export default LaboratoryDiagnosticsPage;
