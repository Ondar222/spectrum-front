import type React from "react";
import { useState } from "react";
import certificateService, { type CreateCertificateRequest, type Customer } from "../services/certificates";

interface CertificateForm {
  recipientName: string;
  recipientEmail: string;
  senderName: string;
  senderEmail: string;
  amount: number;
  message: string;
  agreeToSiteConsent: boolean;
}

export default function GiftCertificatesPage() {
  const [formData, setFormData] = useState<CertificateForm>({
    recipientName: "",
    recipientEmail: "",
    senderName: "",
    senderEmail: "",
    amount: 1000,
    message: "",
    agreeToSiteConsent: false,
  });

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [error, setError] = useState<string>("");
  const [fieldErrors, setFieldErrors] = useState<{ [key: string]: string }>({});
  const [useCustomAmount, setUseCustomAmount] = useState(false);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ä–µ–¥—É
  const isProduction = import.meta.env.PROD || false;

  // –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
  const validateEmail = (email: string): boolean => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const handleChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >
  ) => {
    const { name, value, type } = e.target as HTMLInputElement;
    setFormData((prev) => ({
      ...prev,
      [name]: name === "amount"
        ? Number.isNaN(Number.parseInt(value)) ? prev.amount : Number.parseInt(value)
        : (type === 'checkbox' ? (e.target as HTMLInputElement).checked : value),
    }));

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (fieldErrors[name]) {
      setFieldErrors((prev) => ({
        ...prev,
        [name]: "",
      }));
    }
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
  const validateForm = (): { isValid: boolean; errors: string[] } => {
    const errors: string[] = [];
    const fieldErrors: { [key: string]: string } = {};

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    const minAmount = 1000;
    const maxAmount = 50000;
    if (!formData.amount || Number.isNaN(formData.amount)) {
      errors.push("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞");
    } else if (formData.amount < minAmount || formData.amount > maxAmount) {
      errors.push(`–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç ${minAmount.toLocaleString('ru-RU')} –¥–æ ${maxAmount.toLocaleString('ru-RU')} ‚ÇΩ`);
    }

    if (!formData.recipientName.trim()) {
      errors.push("–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ");
      fieldErrors.recipientName = "–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ";
    } else {
      const recipientNameParts = formData.recipientName.trim().split(' ');
      if (recipientNameParts.length < 2 || !recipientNameParts[1].trim()) {
        errors.push("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—É—á–∞—Ç–µ–ª—è");
        fieldErrors.recipientName = "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—É—á–∞—Ç–µ–ª—è";
      }
    }

    if (!formData.recipientEmail.trim()) {
      errors.push("Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
      fieldErrors.recipientEmail = "Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω";
    } else if (!validateEmail(formData.recipientEmail)) {
      errors.push("Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç");
      fieldErrors.recipientEmail = "Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç";
    }

    if (!formData.senderName.trim()) {
      errors.push("–í–∞—à–µ –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ");
      fieldErrors.senderName = "–í–∞—à–µ –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ";
    } else {
      const senderNameParts = formData.senderName.trim().split(' ');
      if (senderNameParts.length < 2 || !senderNameParts[1].trim()) {
        errors.push("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é");
        fieldErrors.senderName = "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é";
      }
    }

    if (!formData.senderEmail.trim()) {
      errors.push("–í–∞—à email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
      fieldErrors.senderEmail = "–í–∞—à email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω";
    } else if (!validateEmail(formData.senderEmail)) {
      errors.push("–í–∞—à email –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç");
      fieldErrors.senderEmail = "–í–∞—à email –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç";
    }

    setFieldErrors(fieldErrors);
    return { isValid: errors.length === 0, errors };
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
    const validation = validateForm();
    if (!validation.isValid || !formData.agreeToSiteConsent) {
      setError(validation.errors.join(", "));
      return;
    }

    setIsSubmitting(true);
    setError("");

    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ (–ø–æ–ª—É—á–∞—Ç–µ–ª—è)
      const customerName = certificateService.parseFullName(formData.recipientName);
      const customer: Customer = {
        firstName: customerName.firstName,
        lastName: customerName.lastName,
        email: formData.recipientEmail,
      };

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä–∞ (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è) - –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
      let sponsor: Customer | undefined;
      const isSelfCertificate = formData.senderEmail === formData.recipientEmail && 
                               formData.senderName === formData.recipientName;
      
      if (!isSelfCertificate) {
        const sponsorName = certificateService.parseFullName(formData.senderName);
        sponsor = {
          firstName: sponsorName.firstName,
          lastName: sponsorName.lastName,
          email: formData.senderEmail,
        };
      }

      const requestData: CreateCertificateRequest = {
        amount: formData.amount,
        customer,
        sponsor,
        greetingText: formData.message || undefined,
      };

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
      const response = await certificateService.createCertificate(requestData);

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
      window.location.href = response.paymentUrl;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:", error);
      const errorMessage = error instanceof Error ? error.message : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞";
      setError(errorMessage + ". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      setIsSubmitting(false);
    }
  };

  const certificateAmounts = [
    { value: 1000, label: "1 000 ‚ÇΩ" },
    { value: 2000, label: "2 000 ‚ÇΩ" },
    { value: 3000, label: "3 000 ‚ÇΩ" },
    { value: 5000, label: "5 000 ‚ÇΩ" },
    { value: 10000, label: "10 000 ‚ÇΩ" },
    { value: 15000, label: "15 000 ‚ÇΩ" },
    { value: 20000, label: "20 000 ‚ÇΩ" },
    { value: 30000, label: "30 000 ‚ÇΩ" },
    { value: 40000, label: "40 000 ‚ÇΩ" },
    { value: 50000, label: "50 000 ‚ÇΩ" },
  ];

  if (isSubmitted) {
    return (
      <div className="min-h-screen bg-gray-50 py-12">
        <div className="container mx-auto px-4">
          <div className="max-w-2xl mx-auto bg-white rounded-lg shadow-lg p-8 text-center">
            <div className="text-green-500 mb-4">
              <svg
                className="w-16 h-16 mx-auto"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
            </div>
            <h2 className="text-2xl font-bold text-dark mb-4">
              –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!
            </h2>
            <p className="text-gray-600 mb-6">
              –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email –∞–¥—Ä–µ—Å.
              –ü–æ–ª—É—á–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 3
              –º–µ—Å—è—Ü–µ–≤.
            </p>
            <button
              onClick={() => setIsSubmitted(false)}
              className="bg-primary hover:bg-primaryDark text-white px-6 py-3 rounded-md font-medium transition-colors"
            >
              –û—Ñ–æ—Ä–º–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="container mx-auto px-4">
        {/* Hero Section */}
        <div className="text-center mb-10">
          <h1 className="text-4xl font-bold text-dark mb-4">
            –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            –ù–µ –∑–Ω–∞–µ—Ç–µ –∫–∞–∫–æ–π –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–µ–ø–æ–¥–Ω–µ—Å—Ç–∏? –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ —É—Å–ª—É–≥–∏
            –∫–ª–∏–Ω–∏–∫–∏ - –∏–¥–µ–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –ª—é–±–æ–≥–æ —Ç–æ—Ä–∂–µ—Å—Ç–≤–∞!
          </p>

          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ä–µ–¥—ã */}
          {/* {!isProduction && (
            <div className="mt-4 inline-block bg-yellow-100 border border-yellow-400 text-yellow-800 px-4 py-2 rounded-lg">
              <span className="font-medium">üß™ –¢–ï–°–¢–û–í–ê–Ø –°–†–ï–î–ê</span>
              <span className="text-sm ml-2">(–ø–ª–∞—Ç–µ–∂–∏ –Ω–µ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è)</span>
            </div>
          )} */}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
          {/* Left Column - Benefits */}
          <div className="space-y-8">
            <div className="bg-white rounded-lg shadow-lg p-8">
              <h2 className="text-2xl font-semibold text-dark mb-6">
                –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
              </h2>
              <ul className="space-y-4">
                <li className="flex items-start">
                  <svg
                    className="w-6 h-6 text-primary mr-3 mt-1"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="M5 13l4 4L19 7"
                    />
                  </svg>
                  <span className="text-gray-600">
                    –û–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è —Ü–µ–ª—ã–π –∫–æ–º–ø–ª–µ–∫—Å —É—Å–ª—É–≥
                  </span>
                </li>
                <li className="flex items-start">
                  <svg
                    className="w-6 h-6 text-primary mr-3 mt-1"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="M5 13l4 4L19 7"
                    />
                  </svg>
                  <span className="text-gray-600">
                    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤
                  </span>
                </li>
                <li className="flex items-start">
                  <svg
                    className="w-6 h-6 text-primary mr-3 mt-1"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="M5 13l4 4L19 7"
                    />
                  </svg>
                  <span className="text-gray-600">
                    –ö—Ä–∞—Å–∏–≤—ã–π –∏ —Å—Ç–∏–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫
                  </span>
                </li>
                <li className="flex items-start">
                  <svg
                    className="w-6 h-6 text-primary mr-3 mt-1"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="M5 13l4 4L19 7"
                    />
                  </svg>
                  <span className="text-gray-600">–ü–æ–∫—É–ø–∫–∞ –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É</span>
                </li>
                <li className="flex items-start">
                  <svg
                    className="w-6 h-6 text-primary mr-3 mt-1"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="M5 13l4 4L19 7"
                    />
                  </svg>
                  <span className="text-gray-600">–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç</span>
                </li>
              </ul>
            </div>

            <div className="bg-white rounded-lg shadow-lg p-8">
              <h3 className="text-xl font-semibold text-dark mb-4">
                –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
              </h3>
              <div className="space-y-4">
                <div className="flex items-start">
                  <div className="bg-primary text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold mr-3 mt-1">
                    1
                  </div>
                  <div>
                    <h4 className="font-medium text-dark">
                      –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
                    </h4>
                    <p className="text-sm text-gray-600">
                      –û—Ç 1 000 –¥–æ 50 000 —Ä—É–±–ª–µ–π
                    </p>
                  </div>
                </div>
                <div className="flex items-start">
                  <div className="bg-primary text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold mr-3 mt-1">
                    2
                  </div>
                  <div>
                    <h4 className="font-medium text-dark">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É</h4>
                    <p className="text-sm text-gray-600">
                      –£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    </p>
                  </div>
                </div>
                <div className="flex items-start">
                  <div className="bg-primary text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold mr-3 mt-1">
                    3
                  </div>
                  <div>
                    <h4 className="font-medium text-dark">
                      –û–ø–ª–∞—Ç–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
                    </h4>
                    <p className="text-sm text-gray-600">
                      –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –æ–Ω–ª–∞–π–Ω
                    </p>
                  </div>
                </div>
                <div className="flex items-start">
                  <div className="bg-primary text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold mr-3 mt-1">
                    4
                  </div>
                  <div>
                    <h4 className="font-medium text-dark">
                      –ü–æ–ª—É—á–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
                    </h4>
                    <p className="text-sm text-gray-600">
                      –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ email
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Right Column - Form */}
          <div className="bg-white rounded-lg shadow-lg p-8">
            <h2 className="text-2xl font-semibold text-dark mb-6">
              –û—Ñ–æ—Ä–º–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            </h2>

            {error && (
              <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
                <p className="text-red-800 text-sm">{error}</p>
              </div>
            )}

            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Amount Selection */}
              <div>
                <label className="block text-gray-700 mb-3 font-medium">
                  –°—É–º–º–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
                </label>
                <div className="grid grid-cols-2 gap-3">
                  {certificateAmounts.map((amount) => (
                    <button
                      key={amount.value}
                      type="button"
                      onClick={() => {
                        setUseCustomAmount(false);
                        setFormData((prev) => ({
                          ...prev,
                          amount: amount.value,
                        }));
                      }}
                      className={`p-3 rounded-lg border-2 text-center transition-colors ${
                        !useCustomAmount && formData.amount === amount.value
                          ? "border-primary bg-primary text-white"
                          : "border-gray-300 hover:border-primary"
                      }`}
                    >
                      {amount.label}
                    </button>
                  ))}
                </div>

                {/* –î—Ä—É–≥–∞—è —Å—É–º–º–∞ */}
                <div className="mt-3">
                  <label className="inline-flex items-center gap-2 text-sm text-gray-700">
                    <input
                      type="checkbox"
                      checked={useCustomAmount}
                      onChange={(e) => setUseCustomAmount(e.target.checked)}
                      className="h-4 w-4 text-primary focus:ring-primary rounded border-gray-300"
                    />
                    –î—Ä—É–≥–∞—è —Å—É–º–º–∞
                  </label>
                  {useCustomAmount && (
                    <div className="mt-2 flex items-center gap-3">
                      <input
                        type="number"
                        inputMode="numeric"
                        min={1000}
                        max={50000}
                        step={100}
                        value={formData.amount || 1000}
                        onChange={(e) => {
                          const next = Number.parseInt(e.target.value);
                          setFormData((prev) => ({
                            ...prev,
                            amount: Number.isNaN(next) ? prev.amount : next,
                          }));
                        }}
                        className="w-40 px-4 py-2 border rounded focus:outline-none focus:border-primary border-gray-300"
                        placeholder="–ù–∞–ø—Ä.: 7000"
                      />
                      <span className="text-sm text-gray-500">‚ÇΩ (–æ—Ç 1 000 –¥–æ 50 000)</span>
                    </div>
                  )}
                </div>
              </div>

              {/* Recipient Information */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-dark">
                  –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                </h3>
                <div>
                  <label
                    htmlFor="recipientName"
                    className="block text-gray-700 mb-2"
                  >
                    –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è *
                  </label>
                  <input
                    type="text"
                    id="recipientName"
                    name="recipientName"
                    value={formData.recipientName}
                    onChange={handleChange}
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
                    className={`w-full px-4 py-2 border rounded focus:outline-none focus:border-primary ${
                      fieldErrors.recipientName
                        ? "border-red-500 focus:border-red-500"
                        : "border-gray-300"
                    }`}
                    required
                  />
                  {fieldErrors.recipientName && (
                    <p className="text-red-500 text-sm mt-1">
                      {fieldErrors.recipientName}
                    </p>
                  )}
                </div>
                <div>
                  <label
                    htmlFor="recipientEmail"
                    className="block text-gray-700 mb-2"
                  >
                    Email –ø–æ–ª—É—á–∞—Ç–µ–ª—è *
                  </label>
                  <input
                    type="email"
                    id="recipientEmail"
                    name="recipientEmail"
                    value={formData.recipientEmail}
                    onChange={handleChange}
                    className={`w-full px-4 py-2 border rounded focus:outline-none focus:border-primary ${
                      fieldErrors.recipientEmail
                        ? "border-red-500 focus:border-red-500"
                        : "border-gray-300"
                    }`}
                    required
                  />
                  {fieldErrors.recipientEmail && (
                    <p className="text-red-500 text-sm mt-1">
                      {fieldErrors.recipientEmail}
                    </p>
                  )}
                </div>
              </div>

              {/* Sender Information */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-dark">
                  –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                </h3>
                <div>
                  <label
                    htmlFor="senderName"
                    className="block text-gray-700 mb-2"
                  >
                    –í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è *
                  </label>
                  <input
                    type="text"
                    id="senderName"
                    name="senderName"
                    value={formData.senderName}
                    onChange={handleChange}
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤"
                    className={`w-full px-4 py-2 border rounded focus:outline-none focus:border-primary ${
                      fieldErrors.senderName
                        ? "border-red-500 focus:border-red-500"
                        : "border-gray-300"
                    }`}
                    required
                  />
                  {fieldErrors.senderName && (
                    <p className="text-red-500 text-sm mt-1">
                      {fieldErrors.senderName}
                    </p>
                  )}
                </div>
                <div>
                  <label
                    htmlFor="senderEmail"
                    className="block text-gray-700 mb-2"
                  >
                    –í–∞—à email *
                  </label>
                  <input
                    type="email"
                    id="senderEmail"
                    name="senderEmail"
                    value={formData.senderEmail}
                    onChange={handleChange}
                    className={`w-full px-4 py-2 border rounded focus:outline-none focus:border-primary ${
                      fieldErrors.senderEmail
                        ? "border-red-500 focus:border-red-500"
                        : "border-gray-300"
                    }`}
                    required
                  />
                  {fieldErrors.senderEmail && (
                    <p className="text-red-500 text-sm mt-1">
                      {fieldErrors.senderEmail}
                    </p>
                  )}
                </div>
              </div>

              {/* Message */}
              <div>
                <label htmlFor="message" className="block text-gray-700 mb-2">
                  –ü–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                </label>
                <textarea
                  id="message"
                  name="message"
                  value={formData.message}
                  onChange={handleChange}
                  rows={4}
                  className="w-full px-4 py-2 border border-gray-300 rounded focus:outline-none focus:border-primary"
                  placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è..."
                />
              </div>

              <div>
                <label className={`flex items-start space-x-3 ${!formData.agreeToSiteConsent && error ? 'text-red-600' : ''}`}>
                  <input
                    type="checkbox"
                    name="agreeToSiteConsent"
                    checked={formData.agreeToSiteConsent}
                    onChange={handleChange}
                    className={`mt-1 h-4 w-4 text-primary focus:ring-primary rounded ${
                      !formData.agreeToSiteConsent && error
                        ? 'border-red-300 focus:ring-red-500'
                        : 'border-gray-300'
                    }`}
                    required
                  />
                  <span className="text-sm text-gray-700">
                    –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ{' '}
                    <a
                      href="/documents/—Å–æ–≥–ª–∞—Å–∏–µ_–Ω–∞_–ø–µ—Ä—Å–¥–∞–Ω–Ω—ã–µ_–Ω–∞_—Å–∞–∏ÃÜ—Ç.docx"
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-primary hover:underline"
                    >
                     —Å–æ–≥–ª–∞—Å–∏—é –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    </a>
                  </span>
                </label>
              </div>

              {/* Submit Button */}
              <button
                type="submit"
                disabled={isSubmitting}
                className={`w-full bg-primary hover:bg-primaryDark text-white py-3 px-6 rounded-md font-medium transition-colors ${
                  isSubmitting ? "opacity-50 cursor-not-allowed" : ""
                }`}
              >
                {isSubmitting
                  ? "–û–±—Ä–∞–±–æ—Ç–∫–∞..."
                  : `–û–ø–ª–∞—Ç–∏—Ç—å ${certificateService.formatAmount(formData.amount)}`}
              </button>
            </form>

            <div className="mt-4 text-sm text-gray-600">
              –û—Ñ–æ—Ä–º–ª—è—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å{' '}
              <a
                href="/documents/utverzhdeno.pdf"
                target="_blank"
                rel="noopener noreferrer"
                className="text-primary hover:underline"
              >
             –ü–æ–ª–∏—Ç–∏–∫–∏ –∑–∞—â–∏—Ç—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
              </a>.
            </div>

            <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
              <p className="text-sm text-yellow-800">
                <strong>–í–∞–∂–Ω–æ:</strong> –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email
                –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–°–ü–ê–ú", –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–∏—Å—å–º–æ.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
