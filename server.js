import express from "express";
import cors from "cors";
import fetch from "node-fetch";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞
const ALFA_BANK_CONFIG = {
  // –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞
  test: {
    url: "https://alfa.rbsuat.com/payment/rest",
    token: "pfcr5js74l5jnsqcsrms960nok",
    login: "clinicaldan-operator",
    password: "KACr2LiW3R?",
  },
  // –ü—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥–∞
  production: {
    url: "https://pay.alfabank.ru/payment/rest",
    token: "pfcr5js74l5jnsqcsrms960nok",
    login: "clinicaldan-operator",
    password: "vy_$2BTVD*KVD#u/",
  },
};

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ä–µ–¥—É
const isProduction = process.env.NODE_ENV === "production";
const currentConfig = isProduction
  ? ALFA_BANK_CONFIG.production
  : ALFA_BANK_CONFIG.test;

console.log(`üöÄ –ó–∞–ø—É—Å–∫ –≤ ${isProduction ? "–ü–†–û–î–ê–ö–®–ù" : "–¢–ï–°–¢–û–í–û–ô"} —Å—Ä–µ–¥–µ`);
console.log(`üîó URL –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞: ${currentConfig.url}`);

// –ü—Ä–æ–∫—Å–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
app.post("/api/payment/register", async (req, res) => {
  const startTime = Date.now();
  const requestId = `req_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;

  console.log(`[${requestId}] === –ù–ê–ß–ê–õ–û –°–û–ó–î–ê–ù–ò–Ø –ü–õ–ê–¢–ï–ñ–ê ===`);

  try {
    const { amount, returnUrl, failUrl, description } = req.body;

    console.log(`[${requestId}] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:`, {
      amount,
      returnUrl,
      failUrl,
      description,
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!amount || !returnUrl || !failUrl || !description) {
      console.error(`[${requestId}] ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:`, {
        amount,
        returnUrl,
        failUrl,
        description,
      });
      return res.status(400).json({
        error: true,
        errorCode: "MISSING_PARAMETERS",
        message: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
      });
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (amount < 100) {
      console.error(`[${requestId}] ‚ùå –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞: ${amount}`);
      return res.status(400).json({
        error: true,
        errorCode: "INVALID_AMOUNT",
        message: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ 100 —Ä—É–±–ª–µ–π",
      });
    }

    if (amount > 100000) {
      console.error(`[${requestId}] ‚ùå –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞: ${amount}`);
      return res.status(400).json({
        error: true,
        errorCode: "INVALID_AMOUNT",
        message: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ 100 000 —Ä—É–±–ª–µ–π",
      });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è orderNumber
    const orderNumber = `cert_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;
    console.log(`[${requestId}] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderNumber}`);

    const requestData = {
      orderNumber: orderNumber,
      amount: (amount * 100).toString(), // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∫–æ–ø–µ–π–∫–∏
      returnUrl: returnUrl,
      failUrl: failUrl,
      description: description,
      token: currentConfig.token,
    };

    console.log(`[${requestId}] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫—É:`, {
      orderNumber: requestData.orderNumber,
      amount: requestData.amount,
      returnUrl: requestData.returnUrl,
      failUrl: requestData.failUrl,
      description: requestData.description,
      token: "***", // –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –ª–æ–≥–∞—Ö
    });

    const response = await fetch(`${currentConfig.url}/register.do`, {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
      body: new URLSearchParams(requestData).toString(),
    });

    console.log(
      `[${requestId}] –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞: ${response.status}`
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error(
        `[${requestId}] ‚ùå HTTP –æ—à–∏–±–∫–∞ –æ—Ç –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞:`,
        response.status,
        errorText
      );
      throw new Error(
        `HTTP error! status: ${response.status}, body: ${errorText}`
      );
    }

    const result = await response.json();
    console.log(`[${requestId}] –û—Ç–≤–µ—Ç –æ—Ç –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞:`, result);

    if (result.errorCode) {
      console.error(`[${requestId}] ‚ùå –û—à–∏–±–∫–∞ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞:`, {
        errorCode: result.errorCode,
        errorMessage: result.errorMessage,
        orderNumber: orderNumber,
      });
      return res.status(400).json({
        error: true,
        errorCode: result.errorCode,
        errorMessage: result.errorMessage || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞",
        orderNumber: orderNumber,
      });
    }

    const duration = Date.now() - startTime;
    console.log(`[${requestId}] ‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:`, {
      orderId: result.orderId,
      orderNumber: orderNumber,
      duration: `${duration}ms`,
    });

    res.json({
      success: true,
      formUrl: result.formUrl,
      orderId: result.orderId,
      orderNumber: orderNumber,
      duration: duration,
    });
  } catch (error) {
    const duration = Date.now() - startTime;
    console.error(`[${requestId}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:`, {
      error: error.message,
      duration: `${duration}ms`,
    });
    res.status(500).json({
      error: true,
      errorCode: "INTERNAL_ERROR",
      message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      details: error.message,
      duration: duration,
    });
  }
});

// –ü—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
app.post("/api/payment/status", async (req, res) => {
  const startTime = Date.now();
  const requestId = `status_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;

  console.log(`[${requestId}] === –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –°–¢–ê–¢–£–°–ê ===`);

  try {
    const { orderId } = req.body;

    console.log(`[${requestId}] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞:`, {
      orderId,
    });

    if (!orderId) {
      console.error(`[${requestId}] ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç orderId`);
      return res.status(400).json({
        error: true,
        errorCode: "MISSING_ORDER_ID",
        message: "orderId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
      });
    }

    const requestData = {
      orderId: orderId,
      token: currentConfig.token,
    };

    console.log(`[${requestId}] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:`, {
      orderId: requestData.orderId,
      token: "***", // –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –ª–æ–≥–∞—Ö
    });

    const response = await fetch(`${currentConfig.url}/getOrderStatus.do`, {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
      },
      body: new URLSearchParams(requestData).toString(),
    });

    console.log(
      `[${requestId}] –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞: ${response.status}`
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error(
        `[${requestId}] ‚ùå HTTP –æ—à–∏–±–∫–∞ –æ—Ç –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞:`,
        response.status,
        errorText
      );
      throw new Error(
        `HTTP error! status: ${response.status}, body: ${errorText}`
      );
    }

    const result = await response.json();
    console.log(`[${requestId}] –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ—Ç –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞:`, result);

    if (result.errorCode) {
      console.error(
        `[${requestId}] ‚ùå –û—à–∏–±–∫–∞ –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:`,
        {
          errorCode: result.errorCode,
          errorMessage: result.errorMessage,
          orderId: orderId,
        }
      );
      return res.status(400).json({
        error: true,
        errorCode: result.errorCode,
        errorMessage: result.errorMessage || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞",
        orderId: orderId,
      });
    }

    const duration = Date.now() - startTime;
    console.log(`[${requestId}] ‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω:`, {
      orderId: orderId,
      orderStatus: result.orderStatus,
      orderNumber: result.orderNumber,
      amount: result.amount,
      duration: `${duration}ms`,
    });

    res.json({
      success: true,
      ...result,
      duration: duration,
    });
  } catch (error) {
    const duration = Date.now() - startTime;
    console.error(`[${requestId}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:`, {
      error: error.message,
      orderId: req.body.orderId,
      duration: `${duration}ms`,
    });
    res.status(500).json({
      error: true,
      errorCode: "INTERNAL_ERROR",
      message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      details: error.message,
      duration: duration,
    });
  }
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
app.use(express.static(path.join(__dirname, "dist")));

// Fallback –¥–ª—è SPA
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "dist", "index.html"));
});

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api`);
});
